# sample 10-second array
# 223.csv
# alternating combination of normal and ventricular ectopic beats

import numpy as np
from scipy.signal import medfilt
import operator
from sklearn import svm
import time
import sklearn

#  constants
winL = 90
winR = 90
arrhythmia_detect_flag = 0
do_preprocess = True
use_weight_class = True
use_RR = True
norm_RR = True
multi_mode = 'ovo'
voting_strategy = 'ovo_voting'

size_RR_max = 20
fs = 360            # SAMPLING RATE, change this to 125 for 125 Hz
C_value = 0.001
gamma_value = 0.0


# RAW_signal = raw 10-seocond ECG signal from the maxim ecg device
RAW_signal = [909, 908, 911, 911, 910, 913, 914, 914, 916, 912, 913, 911, 908, 908, 908, 910, 908, 911, 913, 913, 914, 912, 912, 910, 908, 912, 911, 912, 910, 914, 916, 917, 916, 916, 914, 912, 916, 916, 917, 918, 918, 922, 924, 925, 927, 929, 928, 930, 931, 932, 936, 937, 940, 941, 942, 940, 939, 938, 935, 932, 931, 928, 924, 924, 922, 918, 916, 913, 912, 909, 905, 907, 903, 904, 902, 906, 909, 909, 912, 909, 909, 909, 910, 910, 911, 912, 912, 917, 917, 920, 923, 929, 937, 948, 960, 976, 995, 1023, 1055, 1095, 1136, 1173, 1206, 1232, 1258, 1287, 1305, 1303, 1271, 1210, 1131, 1042, 963, 904, 866, 856, 853, 861, 870, 879, 885, 888, 891, 890, 890, 888, 887, 885, 885, 884, 883, 881, 881, 880, 880, 880, 882, 881, 883, 879, 880, 879, 876, 876, 875, 875, 874, 875, 874, 874, 875, 874, 874, 872, 870, 869, 865, 864, 867, 866, 865, 864, 866, 864, 862, 859, 857, 857, 854, 853, 854, 853, 854, 853, 854, 852, 851, 848, 847, 846, 842, 842, 842, 841, 843, 843, 845, 846, 843, 844, 840, 837, 841, 841, 842, 844, 846, 849, 856, 856, 858, 861, 863, 864, 867, 870, 874, 878, 882, 887, 892, 894, 894, 896, 896, 895, 897, 897, 901, 902, 905, 905, 909, 908, 908, 907, 904, 902, 905, 904, 906, 905, 907, 909, 910, 908, 905, 908, 903, 900, 898, 901, 903, 902, 903, 904, 907, 907, 904, 903, 901, 897, 896, 894, 893, 893, 894, 896, 898, 895, 896, 895, 893, 892, 891, 891, 891, 893, 896, 898, 899, 899, 898, 894, 890, 890, 890, 892, 898, 912, 928, 951, 976, 1002, 1023, 1043, 1051, 1058, 1060, 1057, 1043, 1022, 997, 974, 956, 938, 921, 899, 874, 843, 815, 791, 770, 757, 755, 758, 763, 769, 773, 776, 779, 779, 778, 777, 777, 781, 788, 793, 803, 811, 821, 826, 837, 845, 852, 861, 872, 878, 880, 884, 887, 885, 884, 880, 880, 880, 878, 880, 880, 880, 882, 881, 884, 883, 884, 882, 882, 882, 880, 878, 879, 880, 881, 883, 885, 882, 882, 882, 883, 882, 884, 885, 888, 893, 894, 896, 902, 904, 907, 909, 912, 916, 922, 923, 930, 935, 941, 948, 953, 956, 959, 963, 966, 969, 971, 975, 979, 986, 990, 993, 996, 998, 999, 998, 996, 995, 992, 993, 989, 989, 987, 987, 985, 981, 977, 974, 966, 965, 959, 954, 951, 947, 945, 943, 941, 937, 932, 929, 923, 924, 920, 918, 917, 915, 915, 916, 915, 914, 914, 911, 911, 906, 905, 903, 905, 906, 907, 909, 910, 909, 909, 910, 909, 905, 905, 907, 907, 909, 907, 910, 909, 910, 911, 909, 907, 909, 908, 909, 909, 908, 909, 910, 909, 908, 911, 911, 910, 910, 907, 907, 907, 909, 910, 908, 909, 910, 907, 909, 906, 907, 906, 904, 903, 903, 904, 906, 909, 907, 907, 905, 907, 906, 905, 906, 904, 903, 905, 907, 908, 906, 906, 906, 905, 906, 907, 900, 905, 906, 906, 906, 908, 910, 910, 910, 910, 910, 908, 909, 910, 910, 911, 911, 915, 914, 914, 914, 916, 912, 911, 913, 915, 918, 917, 921, 924, 926, 926, 929, 929, 931, 930, 933, 936, 936, 935, 934, 932, 930, 926, 924, 923, 920, 917, 912, 909, 908, 903, 904, 902, 901, 900, 897, 897, 895, 896, 895, 897, 900, 901, 903, 904, 904, 906, 904, 905, 905, 905, 908, 913, 918, 929, 942, 958, 975, 993, 1016, 1041, 1071, 1102, 1133, 1162, 1187, 1214, 1240, 1268, 1295, 1313, 1305, 1265, 1203, 1124, 1040, 967, 905, 872, 857, 858, 862, 872, 876, 876, 876, 876, 879, 879, 880, 880, 879, 882, 883, 881, 878, 877, 877, 875, 874, 874, 873, 873, 874, 875, 878, 876, 876, 869, 871, 868, 867, 869, 869, 872, 868, 871, 866, 866, 867, 865, 864, 861, 860, 859, 861, 860, 859, 861, 864, 861, 857, 857, 855, 851, 850, 850, 851, 850, 850, 852, 851, 850, 847, 845, 842, 841, 839, 840, 839, 841, 840, 843, 843, 844, 844, 841, 840, 838, 838, 840, 843, 845, 847, 851, 854, 856, 856, 859, 859, 861, 862, 868, 873, 879, 884, 890, 892, 893, 897, 895, 896, 897, 897, 898, 900, 903, 907, 909, 910, 910, 908, 907, 904, 902, 903, 905, 908, 909, 906, 909, 909, 906, 908, 906, 903, 903, 902, 901, 903, 903, 903, 905, 905, 904, 902, 900, 900, 898, 897, 897, 893, 895, 895, 897, 899, 897, 898, 897, 895, 895, 892, 895, 895, 898, 901, 900, 895, 893, 891, 893, 901, 914, 937, 967, 999, 1025, 1044, 1054, 1054, 1040, 1016, 981, 947, 917, 893, 874, 855, 831, 808, 786, 767, 757, 752, 752, 760, 765, 772, 778, 783, 788, 790, 793, 793, 799, 804, 810, 817, 822, 828, 836, 845, 855, 864, 871, 880, 885, 889, 890, 892, 890, 891, 890, 893, 893, 894, 894, 897, 896, 899, 894, 896, 893, 893, 894, 895, 895, 895, 898, 898, 900, 899, 899, 900, 897, 895, 895, 897, 899, 899, 902, 904, 903, 906, 908, 911, 911, 911, 917, 920, 926, 932, 939, 941, 946, 950, 953, 957, 963, 966, 971, 975, 982, 989, 994, 999, 1002, 1007, 1007, 1010, 1013, 1013, 1014, 1016, 1020, 1020, 1021, 1023, 1017, 1014, 1014, 1010, 1007, 1003, 1002, 996, 997, 994, 990, 987, 983, 979, 973, 969, 965, 959, 956, 955, 951, 947, 947, 946, 943, 938, 935, 931, 928, 927, 926, 925, 926, 925, 927, 928, 927, 925, 922, 918, 920, 920, 918, 922, 923, 924, 925, 924, 925, 924, 923, 923, 923, 923, 923, 923, 924, 925, 926, 926, 927, 924, 923, 924, 920, 921, 922, 920, 922, 925, 926, 925, 924, 923, 919, 919, 919, 916, 916, 918, 918, 919, 921, 922, 922, 920, 919, 919, 915, 913, 913, 916, 918, 920, 921, 920, 915, 917, 917, 915, 914, 914, 915, 915, 916, 918, 919, 920, 919, 918, 916, 915, 915, 914, 914, 915, 917, 917, 921, 921, 920, 918, 920, 920, 920, 919, 922, 921, 921, 923, 923, 927, 926, 927, 926, 927, 928, 931, 931, 934, 937, 942, 946, 948, 947, 947, 945, 942, 942, 940, 938, 939, 937, 935, 935, 933, 931, 928, 924, 921, 915, 913, 912, 911, 909, 909, 913, 913, 912, 913, 912, 911, 914, 910, 909, 912, 915, 916, 921, 920, 925, 928, 931, 936, 944, 957, 976, 998, 1027, 1058, 1094, 1132, 1164, 1190, 1211, 1226, 1241, 1261, 1287, 1292, 1271, 1222, 1150, 1069, 986, 921, 878, 858, 854, 860, 869, 879, 886, 889, 892, 896, 894, 894, 891, 890, 889, 887, 887, 888, 888, 886, 888, 889, 888, 888, 887, 885, 882, 881, 881, 881, 881, 880, 882, 882, 882, 879, 880, 880, 876, 874, 872, 871, 872, 876, 875, 876, 874, 872, 871, 869, 868, 863, 865, 863, 864, 862, 862, 861, 861, 862, 859, 858, 856, 856, 852, 852, 854, 853, 852, 851, 850, 853, 849, 849, 852, 850, 852, 853, 854, 856, 856, 861, 859, 860, 863, 865, 867, 869, 871, 873, 876, 881, 886, 889, 891, 894, 897, 898, 900, 901, 904, 906, 909, 911, 914, 916, 916, 916, 917, 916, 915, 914, 915, 914, 913, 916, 915, 917, 916, 915, 914, 913, 907, 908, 910, 909, 910, 912, 911, 907, 907, 909, 907, 904, 904, 902, 901, 901, 903, 902, 904, 902, 901, 901, 900, 899, 898, 897, 899, 900, 904, 904, 907, 906, 903, 901, 897, 893, 895, 900, 908, 919, 940, 958, 984, 1009, 1029, 1046, 1056, 1062, 1060, 1055, 1038, 1016, 991, 964, 947, 928, 910, 888, 857, 824, 799, 775, 765, 763, 767, 771, 779, 789, 791, 792, 790, 792, 792, 794, 799, 806, 813, 823, 833, 842, 850, 858, 863, 869, 877, 879, 881, 883, 884, 887, 888, 889, 887, 888, 888, 887, 887, 885, 885, 885, 884, 883, 888, 887, 884, 886, 884, 886, 883, 883, 884, 885, 885, 886, 888, 889, 888, 887, 885, 883, 883, 883, 884, 886, 888, 892, 895, 898, 902, 903, 905, 908, 912, 916, 921, 925, 932, 941, 945, 952, 955, 961, 964, 966, 969, 972, 976, 982, 985, 992, 995, 997, 997, 999, 995, 996, 993, 992, 990, 988, 987, 987, 984, 983, 979, 978, 971, 971, 962, 957, 955, 952, 952, 950, 944, 943, 937, 937, 932, 933, 929, 926, 924, 921, 920, 918, 921, 921, 919, 919, 916, 914, 911, 908, 906, 908, 908, 908, 909, 909, 908, 910, 911, 910, 907, 908, 908, 909, 910, 910, 912, 913, 911, 912, 912, 911, 909, 909, 909, 909, 910, 910, 911, 912, 911, 909, 909, 908, 908, 908, 908, 909, 909, 909, 911, 910, 911, 910, 908, 907, 904, 902, 903, 905, 908, 906, 910, 911, 911, 911, 909, 907, 905, 905, 904, 904, 904, 904, 907, 907, 909, 906, 906, 906, 903, 901, 902, 903, 906, 907, 907, 909, 908, 908, 906, 904, 903, 901, 902, 903, 905, 906, 907, 909, 908, 907, 907, 908, 907, 907, 909, 909, 909, 912, 914, 914, 913, 913, 915, 913, 914, 915, 915, 916, 919, 924, 927, 928, 930, 934, 934, 933, 933, 931, 930, 930, 926, 926, 925, 926, 923, 921, 917, 915, 911, 909, 909, 904, 903, 900, 897, 895, 894, 894, 892, 892, 893, 893, 894, 896, 896, 897, 899, 901, 900, 900, 900, 898, 897, 897, 901, 904, 913, 917, 927, 939, 952, 967, 984, 1005, 1027, 1056, 1089, 1122, 1152, 1180, 1208, 1238, 1271, 1297, 1297, 1260, 1192, 1100, 1005, 923, 869, 838, 835, 844, 858, 868, 874, 876, 876, 875, 875, 872, 872, 872, 872, 874, 874, 874, 870, 870, 866, 864, 865, 864, 866, 869, 869, 870, 869, 868, 869, 865, 864, 860, 858, 859, 859, 859, 860, 863, 860, 859, 855, 854, 853, 852, 851, 852, 851, 852, 851, 849, 849, 846, 841, 841, 840, 841, 837, 839, 837, 838, 838, 838, 836, 837, 834, 831, 830, 829, 829, 831, 837, 839, 840, 843, 843, 846, 845, 846, 849, 850, 850, 856, 860, 866, 868, 873, 875, 878, 881, 882, 883, 884, 888, 891, 894, 895, 898, 901, 901, 901, 899, 897, 896, 897, 899, 900, 901, 904, 906, 907, 906, 903, 904, 900, 900, 899, 898, 898, 902, 903, 905, 903, 902, 903, 901, 898, 897, 898, 899, 893, 895, 896, 898, 899, 897, 895, 892, 892, 888, 889, 892, 890, 891, 892, 892, 891, 888, 891, 892, 894, 892, 893, 892, 891, 887, 888, 888, 892, 895, 909, 925, 946, 974, 999, 1018, 1034, 1043, 1048, 1048, 1043, 1028, 1005, 976, 950, 930, 911, 896, 879, 859, 835, 808, 792, 774, 768, 763, 765, 770, 774, 781, 787, 790, 789, 792, 795, 797, 802, 806, 810, 813, 818, 825, 832, 842, 850, 861, 871, 876, 883, 883, 885, 882, 886, 884, 885, 886, 888, 890, 889, 890, 892, 892, 890, 888, 887, 886, 885, 887, 890, 892, 894, 894, 894, 893, 889, 890, 888, 890, 888, 892, 893, 893, 898, 898, 897, 899, 902, 902, 902, 905, 906, 912, 919, 926, 930, 937, 941, 944, 947, 948, 954, 955, 963, 969, 974, 983, 989, 995, 997, 998, 1000, 1001, 1001, 1004, 1005, 1008, 1011, 1013, 1012, 1011, 1012, 1008, 1004, 1000, 994, 991, 987, 985, 981, 978, 977, 973, 965, 962, 957, 952, 946, 943, 943, 941, 935, 934, 932, 931, 927, 928, 925, 920, 920, 920, 920, 921, 918, 920, 922, 921, 921, 918, 919, 918, 917, 916, 918, 919, 919, 920, 922, 922, 921, 921, 919, 918, 913, 916, 919, 919, 919, 920, 919, 918, 919, 918, 917, 918, 914, 916, 915, 915, 918, 918, 919, 915, 917, 916, 916, 914, 915, 913, 913, 912, 912, 915, 918, 919, 916, 914, 912, 912, 911, 912, 911, 914, 912, 915, 911, 911, 914, 912, 913, 914, 909, 911, 912, 911, 913, 914, 915, 915, 914, 914, 913, 912, 909, 910, 912, 912, 915, 916, 920, 919, 921, 920, 920, 922, 919, 919, 920, 923, 924, 925, 930, 931, 930, 931, 932, 933, 932, 933, 935, 938, 942, 942, 945, 944, 943, 941, 937, 933, 928, 926, 924, 924, 924, 921, 921, 916, 912, 909, 908, 904, 903, 904, 908, 910, 911, 909, 914, 914, 913, 913, 911, 910, 909, 913, 914, 916, 922, 927, 932, 943, 952, 963, 977, 997, 1018, 1044, 1073, 1108, 1140, 1168, 1188, 1203, 1219, 1238, 1258, 1277, 1281, 1265, 1219, 1156, 1082, 1007, 945, 895, 868, 855, 855, 860, 869, 874, 879, 888, 892, 891, 891, 892, 890, 886, 885, 883, 882, 882, 880, 881, 884, 883, 885, 882, 884, 879, 881, 878, 877, 875, 872, 874, 875, 878, 880, 876, 875, 873, 867, 867, 865, 864, 865, 864, 865, 865, 868, 867, 866, 863, 862, 859, 857, 856, 856, 855, 854, 856, 855, 856, 854, 851, 848, 847, 846, 846, 846, 847, 848, 849, 849, 848, 851, 852, 852, 848, 850, 851, 853, 856, 857, 862, 867, 868, 871, 870, 872, 877, 876, 883, 885, 893, 897, 900, 906, 908, 908, 910, 910, 909, 908, 910, 912, 913, 913, 915, 917, 916, 917, 916, 913, 912, 910, 911, 909, 912, 910, 910, 912, 910, 912, 912, 908, 908, 906, 906, 904, 902, 908, 909, 907, 907, 906, 904, 903, 901, 900, 902, 900, 902, 903, 906, 906, 907, 908, 901, 895, 889, 884, 884, 885, 894, 912, 937, 969, 997, 1021, 1040, 1051, 1057, 1056, 1049, 1031, 1003, 975, 945, 920, 897, 871, 842, 809, 779, 751, 736, 732, 738, 747, 758, 771, 778, 782, 786, 787, 787, 787, 791, 800, 810, 822, 828, 840, 845, 852, 856, 862, 868, 873, 877, 884, 888, 893, 893, 894, 895, 893, 894, 892, 891, 891, 890, 891, 891, 890, 889, 893, 895, 895, 895, 893, 893, 892, 892, 893, 893, 894, 896, 897, 896, 896, 894, 894, 891, 895, 895, 895, 898, 900, 902, 909, 913, 916, 921, 923, 923, 926, 929, 936, 944, 948, 954, 960, 967, 971, 973, 978, 980, 984, 987, 993, 996, 1002, 1006, 1011, 1011, 1013, 1014, 1014, 1015, 1014, 1012, 1012, 1012, 1012, 1011, 1010, 1006, 1006, 1001, 998, 993, 992, 986, 984, 978, 979, 975, 975, 970, 965, 963, 959, 955, 952, 945, 948, 944, 942, 940, 940, 938, 936, 930, 929, 928, 927, 924, 926, 926, 927, 927, 927, 928, 927, 927, 925, 923, 921, 920, 921, 924, 923, 927, 928, 926, 927, 926, 924, 925, 922, 923, 925, 924, 926, 925, 928, 927, 925, 924, 923, 922, 921, 919, 921, 924, 924, 924, 926, 927, 926, 924, 921, 920, 920, 919, 920, 919, 921, 923, 922, 922, 923, 922, 921, 915, 914, 912, 915, 913, 916, 917, 920, 923, 922, 922, 919, 916, 916, 916, 914, 917, 920, 920, 923, 921, 920, 921, 916, 917, 916, 916, 917, 917, 919, 920, 922, 923, 921, 921, 922, 921, 920, 923, 923, 925, 926, 929, 929, 929, 930, 931, 927, 928, 930, 931, 931, 933, 935, 937, 944, 946, 946, 945, 948, 946, 945, 943, 941, 940, 940, 938, 940, 938, 935, 930, 928, 924, 921, 919, 915, 914, 913, 913, 910, 914, 911, 910, 909, 909, 908, 907, 906, 909, 910, 911, 913, 916, 918, 917, 919, 921, 924, 928, 937, 951, 967, 987, 1011, 1035, 1065, 1099, 1133, 1163, 1189, 1208, 1229, 1254, 1283, 1307, 1313, 1288, 1233, 1155, 1065, 981, 916, 876, 859, 859, 867, 876, 885, 886, 886, 888, 887, 887, 884, 884, 885, 884, 884, 886, 886, 884, 883, 884, 882, 879, 879, 879, 877, 877, 877, 877, 880, 877, 878, 877, 875, 871, 871, 871, 869, 869, 870, 870, 872, 870, 868, 867, 862, 862, 862, 860, 857, 858, 859, 858, 860, 859, 857, 856, 854, 851, 849, 848, 847, 846, 844, 844, 847, 847, 846, 842, 839, 839, 836, 835, 835, 837, 837, 838, 839, 837, 837, 837, 835, 838, 839, 840, 841, 842, 845, 850, 853, 856, 857, 857, 857, 860, 862, 863, 868, 871, 877, 881, 886, 888, 890, 893, 893, 893, 895, 894, 895, 893, 897, 898, 903, 903, 901, 901, 902, 900, 901, 900, 898, 897, 896, 897, 898, 899, 899, 899, 899, 894, 895, 894, 894, 894, 894, 895, 895, 895, 892, 892, 890, 888, 887, 885, 884, 885, 886, 888, 890, 887, 890, 889, 886, 887, 886, 884, 883, 879, 881, 882, 884, 893, 905, 922, 942, 966, 992, 1013, 1032, 1042, 1054, 1053, 1047, 1028, 1001, 973, 947, 924, 902, 880, 854, 826, 801, 782, 771, 766, 765, 770, 773, 781, 787, 788, 791, 791, 793, 795, 800, 808, 815, 821, 826, 833, 839, 846, 853, 859, 865, 871, 877, 880, 883, 884, 882, 879, 878, 874, 876, 877, 879, 881, 881, 882, 882, 881, 881, 880, 877, 878, 877, 877, 879, 878, 879, 878, 878, 875, 877, 875, 875, 873, 875, 874, 878, 877, 882, 883, 882, 883, 885, 886, 887, 888, 890, 894, 897, 900, 906, 912, 917, 921, 923, 927, 930, 935, 943, 946, 955, 960, 969, 972, 977, 979, 981, 983, 983, 983, 983, 985, 989, 988, 990, 989, 987, 985, 981, 979, 973, 971, 969, 966, 964, 962, 961, 957, 951, 948, 944, 939, 937, 933, 930, 929, 925, 925, 923, 925, 921, 919, 917, 914, 912, 909, 909, 908, 906, 906, 909, 907, 908, 907, 905, 905, 902, 902, 903, 905, 903, 906, 908, 908, 909, 909, 907, 907, 906, 906, 905, 906, 904, 909, 910, 911, 910, 910, 908, 906, 903, 901, 904, 902, 907, 908, 907, 909, 908, 906, 906, 905, 903, 901, 904, 902, 906, 906, 907, 908, 906, 906, 904, 904, 902, 902, 902, 903, 903, 905, 906, 906, 905, 904, 902, 899, 899, 899, 900, 900, 901, 906, 906, 908, 907, 905, 903, 901, 902, 903, 902, 904, 905, 901, 905, 908, 906, 906, 904, 905, 903, 903, 902, 905, 908, 908, 914, 914, 915, 915, 914, 913, 910, 911, 909, 911, 909, 910, 912, 910, 907, 906, 905, 904, 901, 900, 899, 900, 900, 901, 903, 902, 902, 903, 902, 904, 902, 903, 905, 907, 910, 913, 918, 922, 928, 938, 950, 964, 981, 996, 1021, 1049, 1078, 1108, 1139, 1165, 1189, 1206, 1225, 1249, 1276, 1296, 1299, 1273, 1222, 1149, 1070, 993, 927, 886, 862, 855, 859, 865, 871, 875, 879, 884, 889, 889, 887, 885, 882, 879, 876, 877, 876, 878, 878, 881, 882, 882, 880, 879, 878, 876, 874, 873, 872, 872, 874, 873, 872, 872, 873, 871, 870, 871, 869, 866, 866, 866, 865, 865, 864, 864, 863, 860, 861, 860, 855, 852, 851, 852, 852, 852, 852, 851, 847, 848, 845, 844, 840, 840, 840, 841, 841, 845, 842, 845, 845, 844, 844, 843, 840, 839, 842, 844, 849, 852, 859, 862, 868, 868, 872, 878, 879, 885, 886, 889, 893, 896, 900, 901, 903, 904, 902, 903, 904, 904, 905, 905, 907, 907, 907, 911, 911, 910, 909, 907, 906, 903, 903, 904, 905, 908, 908, 908, 905, 904, 902, 901, 897, 897, 897, 898, 901, 900, 901, 900, 898, 899, 895, 894, 892, 891, 889, 891, 891, 892, 895, 894, 894, 894, 893, 892, 894, 893, 895, 894, 895, 892, 890, 891, 892, 899, 911, 931, 955, 983, 1006, 1023, 1035, 1039, 1040, 1030, 1010, 985, 955, 927, 902, 883, 865, 842, 820, 795, 770, 749, 736, 729, 729, 734, 743, 754, 762, 774, 780, 790, 793, 803, 805, 814, 821, 832, 839, 848, 857, 866, 872, 881, 887, 891, 894, 897, 899, 901, 899, 897, 899, 897, 897, 895, 895, 894, 890, 890, 888, 886, 885, 887, 886, 889, 890, 892, 891, 892, 893, 891, 891, 889, 889, 890, 890, 890, 891, 893, 896, 897, 898, 899, 899, 897, 899, 902, 905, 909, 914, 915, 920, 925, 927, 930, 934, 940, 940, 948, 953, 959, 964, 970, 975, 978, 985, 990, 991, 995, 995, 997, 999, 1001, 1005, 1006, 1010, 1009, 1008, 1007, 1005, 1002, 998, 996, 992, 991, 991, 987, 983, 981, 978, 974, 968, 963, 960, 954, 950, 947, 944, 939, 940, 939, 936, 930, 926, 924, 924, 922, 919, 919, 918, 919, 919, 919, 918, 917, 916, 917, 915, 913, 916, 915, 916, 917, 920, 921, 919, 920, 919, 913, 912, 912, 914, 915, 917, 919, 921, 922, 920, 918, 918, 916, 916, 913, 914, 916, 916, 917, 916, 918, 916, 915, 915, 913, 914, 914, 913, 913, 914, 915, 915, 917, 914, 914, 913, 911, 910, 909, 910, 911, 913, 913, 915, 915, 915, 913, 911, 908, 907, 909, 909, 911, 911, 914, 913, 913, 914, 913, 911, 913, 909, 911, 909, 910, 912, 913, 914, 916, 914, 914, 914, 913, 910, 908, 908, 909, 911, 914, 915, 917, 914, 914, 915, 913, 910, 911, 909, 912, 911, 915, 915, 917, 917, 917, 915, 913, 913, 913, 913, 914, 916, 920, 923, 924, 925, 927, 926, 924, 922, 923, 924, 927, 927, 930, 932, 934, 939, 941, 943, 942, 941, 940, 939, 938, 938, 936, 938, 933, 929, 927, 922, 920, 916, 915, 911, 909, 910, 910, 910, 909, 909, 911, 912, 910, 908, 909, 910, 910, 912, 913, 915, 916, 918, 921, 921, 923, 926, 926, 933, 940, 952, 964, 981, 996, 1016, 1040, 1070, 1107, 1137, 1168, 1194, 1210, 1231, 1255, 1280, 1291, 1273, 1220, 1145, 1053, 968, 903, 860, 849, 851, 864, 876, 887, 892, 894, 896, 894, 892, 889, 889, 888, 888, 888, 889, 890, 890, 890, 889, 888, 885, 884, 885, 884, 884, 886, 884, 885, 886, 884, 880, 881, 881, 877, 878, 877, 876, 877, 878, 878, 878, 877, 875, 872, 869, 870, 869, 868, 870, 870, 871, 873, 871, 869, 867, 864, 861, 857, 856, 859, 857, 858, 858, 857, 856, 859, 856, 854, 852, 849, 850, 853, 854, 853, 854, 855, 857, 856, 855, 855, 853, 855, 856, 858, 861, 864, 867, 872, 873, 875, 878, 879, 880, 883, 886, 889, 896, 897, 903, 907, 907, 910, 908, 909, 909, 908, 909, 909, 911, 913, 915, 918, 918, 918, 917, 913, 909, 909, 913, 910, 914, 915, 917, 916, 916, 916, 914, 912, 911, 907, 909, 909, 911, 912, 911, 910, 910, 909, 908, 906, 903, 899, 897, 899, 898, 900, 897, 901, 902, 900, 902, 901, 899, 898, 897, 896, 891, 890, 890, 893, 900, 919, 941, 971, 999, 1023, 1041, 1055, 1066, 1068, 1060, 1044, 1018, 989, 964, 945, 924, 910, 890, 864, 838, 811, 790, 774, 768, 764, 770, 780, 788, 796, 803, 810, 810, 810, 810, 810, 815, 821, 825, 831, 836, 841, 847, 850, 857, 867, 872, 877, 880, 884, 885, 887, 887, 890, 888, 888, 885, 888, 889, 889, 891, 890, 888, 887, 888, 885, 885, 886, 887, 886, 887, 890, 888, 887, 885, 886, 884, 880, 884, 885, 886, 887, 888, 889, 891, 893, 892, 893, 892, 890, 894, 898, 900, 905, 910, 915, 920, 925, 929, 934, 936, 940, 941, 948, 951, 956, 960, 968, 975, 977, 980, 982, 984, 985, 991, 992, 995, 996, 1000, 1001, 1002, 1002, 1000, 998, 995, 993, 992, 992, 989, 986, 986, 982, 980, 975, 968, 966, 962, 955, 953, 948, 946, 946, 943, 940, 936, 936, 929, 928, 925, 922, 920, 918, 918, 919, 916, 917, 916, 917, 916, 916, 912, 912, 911, 911, 911, 913, 914, 916, 910, 911, 911, 911, 909, 907, 909, 910, 911, 910, 913, 911, 913, 914, 912, 912, 911, 911, 912, 910, 912, 912, 912, 916, 916, 914, 910, 909, 908, 906, 907, 906, 910, 911, 911, 912, 913, 912, 910, 910, 907, 906, 906, 907, 908, 908, 910, 908, 908, 910, 908, 903, 903, 905, 906, 907, 906, 907, 908, 910, 910, 909, 909, 906, 906, 904, 904, 906, 906, 906, 907, 909, 907, 908, 903, 905, 904, 904, 902, 905, 904, 906, 908, 908, 910, 908, 906, 906, 904, 903, 904, 904, 904, 905, 907, 909, 909, 909, 908, 906, 906, 904, 904, 906, 911, 912, 914, 915, 914, 913, 912, 910, 915, 914, 913, 914, 915, 921, 922, 926, 931, 930, 933, 935, 934, 933, 932, 929, 930, 930, 928, 929, 927, 923, 919, 916, 912, 910, 907, 902, 900, 898, 897, 898, 898, 896, 895, 896, 892, 890, 895, 895, 898, 900, 901, 904, 905, 905, 901, 902, 905, 905, 911, 915, 924, 932, 947, 967, 988, 1008, 1035, 1062, 1095, 1127, 1158, 1184, 1206, 1229, 1262, 1290, 1306, 1295, 1252, 1179, 1092, 1001, 924, 876, 849, 844, 850, 861, 871, 876, 881, 883, 881, 877, 873, 873, 875, 873, 873, 872, 874, 874, 874, 870, 868, 867, 868, 867, 866, 867, 870, 870, 870, 868, 868, 865, 864, 862, 862, 860, 863, 861, 862, 864, 863, 864, 863, 860, 857, 856, 852, 854, 852, 852, 851, 850, 849, 850, 848, 847, 843, 843, 843, 841, 842, 842, 841, 844, 842, 844, 840, 837, 836, 835, 834, 835, 833, 837, 839, 838, 840, 841, 840, 841, 840, 837, 840, 842, 845, 848, 853, 854, 859, 860, 865, 866, 867, 869, 874, 877, 879, 885, 888, 893, 896, 898, 899, 896, 900, 898, 898, 901, 903, 905, 905, 907, 907, 908, 908, 904, 902, 904, 903, 903, 908, 908, 910, 911, 910, 909, 908, 908, 905, 902, 903, 904, 903, 904, 902, 905, 904, 904, 904, 901]


# NOTE: use direct decision values or transform to range (0,1) with
# 1/exp(-decision)

# Each classifier gives only one vote for its higher class.
# Then the majority vote rule is applied to select the final prediction
    
def ovo_class_combinations(n_classes):
    class_pos = []
    class_neg = []
    for c1 in range(n_classes-1):
        for c2 in range(c1+1,n_classes):
            class_pos.append(c1)
            class_neg.append(c2)

    return class_pos, class_neg


def ovo_voting(decision_ovo, n_classes):
    predictions = np.zeros(len(decision_ovo))
    class_pos, class_neg = ovo_class_combinations(n_classes)

    counter = np.zeros([len(decision_ovo), n_classes])

    for p in range(len(decision_ovo)):
        for i in range(len(decision_ovo[p])):
            if decision_ovo[p,i] > 0:
                counter[p, class_pos[i]] += 1
            else:
                counter[p, class_neg[i]] += 1

        predictions[p] = np.argmax(counter[p])

    return predictions, counter
start_time = 0
execution_time = 0
start_time = time.time()
 
#def arrhythmia_detect_flag(MLII):

############# DO THE BASELINE REMOVAL #######################
MLII = RAW_signal
if do_preprocess:
            #scipy.signal
            # median_filter1D
            baseline = medfilt(MLII, 71) 
            baseline = medfilt(baseline, 215) 

            # Remove Baseline
for i in range(0, len(MLII)):
    MLII[i] = MLII[i] - baseline[i]
#        display_signal(MLII)  
        
###############################################################

########## DO THE BEAT SEGMENTATION ###########################

    signal = MLII
    sampling_rate = fs 
    threshold=20
    before=0.03
    after=0.01


    winB = int(before * sampling_rate)
    winA = int(after * sampling_rate)

    Rset = set()
    length = len(signal)

    # diff
    dx = np.diff(signal)
    dx[dx >= 0] = 0
    dx = dx ** 2

    # detection
    idx, = np.nonzero(dx > threshold)
    idx0 = np.hstack(([0], idx))
    didx = np.diff(idx0)

    # search
    sidx = idx[didx > 1]
    for item in sidx:
        a = item - winB
        if a < 0:
            a = 0
        b = item + winA
        if b > length:
            continue

        r = np.argmax(signal[a:b]) + a
        Rset.add(r)

    # output
    rpeaks = list(Rset)
    rpeaks.sort()
    rpeaks = np.array(rpeaks, dtype='int')

    tol=1
    tol = int(tol * sampling_rate)
    length = len(signal)

    newR = []
    for r in rpeaks:
        a = r - tol
        if a < 0:
            continue
        b = r + tol
        if b > length:
            break
        newR.append(a + np.argmax(signal[a:b]))

    newR = sorted(list(set(newR)))
    newR = np.array(newR, dtype='int')

    pos = [ np.array([])]    
    for a in range(0, len(newR)):
        pos = np.append(pos, newR[a])
    pos = np.array(pos, dtype='int').tolist()
        

###########################################################

###### getting the 180 window beats #######################


    beat = [] # record, beat, lead 
    
    R_poses = [ np.array([])]
    Original_R_poses = [ np.array([])]  
    
    R_poses = pos
    Original_R_poses = pos  
 
    valid_R = [np.array([])]
    patients = []
    
for i in range(0, len(pos)):
            
                if pos[i] > size_RR_max and pos[i] < (len(MLII) - size_RR_max):
                    index, value = max(enumerate(MLII[pos[i] - size_RR_max : pos[i] + size_RR_max]), key=operator.itemgetter(1))
# the 'value' variable gets a value from the baseline removed signal 
                    pos[i] = (pos[i] - size_RR_max) + index

                    peak_type = 0
            
                if(pos[i] > winL and pos[i] < (len(MLII) - winR)):
                    beat.append((MLII[pos[i] - winL : pos[i] + winR]))
                    valid_R = np.append(valid_R, 1)
                    valid_R = np.array(valid_R, dtype='int').tolist()
###############################################################

################### R-R interval features extraction ##########

features = np.array([], dtype=float)
patient_num_beats = np.array([], dtype=np.int32)
      
for p in range(len(beat)):
    patient_num_beats = np.append(patient_num_beats, len(beat[p]))

        # Compute RR features
print("Computing RR intervals ...")
         
# Input: the R-peaks from a signal
# Return: the features RR intervals 
#   (pre_RR, post_RR, local_RR, global_RR)
#    for each beat 
               
pre_R = []
post_R = []
local_R = []
global_R = []

#        for p in range(len(beat)):
                # Pre_R and Post_R
pre_R = np.append(pre_R, 0)
post_R = np.append(post_R, pos[1] - pos[0])

for i in range(1, len(pos)-1):
    pre_R = np.append(pre_R, pos[i] - pos[i-1])
    post_R = np.append(post_R, pos[i+1] - pos[i])

pre_R[0] = pre_R[1]
pre_R = np.append(pre_R, pre_R[0])  

post_R = np.append(post_R, post_R[0])

# Local_R: AVG from last 10 pre_R values
num = 0
avg_val = 0
for j in range(0,len(pre_R)):
    avg_val = avg_val + pre_R[j]
    num = num +1            
local_R = np.append(local_R, avg_val / float(num))
while len(local_R) != len(pre_R):
    local_R = np.append(local_R,local_R[0])

# Global R AVG: from full past-signal
# TODO: AVG from past 5 minutes = 108000 samples
global_R = np.append(global_R, pre_R[0])    
   
for i in range(1, len(pos)):
    num = 0
    avg_val = 0
    for j in range( 0, i):
        if (pos[i] - pos[j]) < (fs):
            avg_val = avg_val + pre_R[j]
            num = num + 1
            #num = i
            global_R = np.append(global_R, avg_val / float(num))
            while len(global_R) != len(pre_R):
                global_R = np.append(global_R,global_R[0])
              

if use_RR:
    f_RR = np.empty((0,4))
    row = np.column_stack((pre_R, post_R, local_R, global_R))
    f_RR = np.vstack((f_RR, row))

features = np.column_stack((features, f_RR)) if features.size else f_RR
        
if norm_RR:
    f_RR_norm = np.empty((0,4))
    avg_pre_R = np.average(pre_R)
    avg_post_R = np.average(post_R)
    avg_local_R = np.average(local_R)
    avg_global_R = np.average(global_R)

    row = np.column_stack((pre_R / avg_pre_R, post_R / avg_post_R, local_R / avg_local_R, global_R / avg_global_R))
    f_RR_norm = np.vstack((f_RR_norm, row))

features = np.column_stack((features, f_RR_norm))  if features.size else f_RR_norm

####################### fit the train set and get the pre-trained svm model ############################
use_probability = False
svm_model = svm.SVC(C=1, cache_size=200,
  class_weight={0: 1.7636363636363637, 1: 4.409090909090909, 2: 6.928571428571429, 3: 16.166666666666668},
  coef0=0.0, decision_function_shape='ovo', degree=2, gamma='auto',
  kernel='rbf', max_iter=-1, probability=False, random_state=None,
  shrinking=True, tol=0.001, verbose=False)
svm_model.fit(features, [0,2,0,1,0,2,0,3,0],[1.7636363636363637,6.928571428571429,1.7636363636363637,4.409090909090909,1.7636363636363637,6.928571428571429,1.7636363636363637,16.166666666666668,1.7636363636363637])
###################### classifier section ########################################

    
if multi_mode == 'ovo':
    decision_ovo        = svm_model.decision_function(features)
        
if voting_strategy == 'ovo_voting':
    predict_ovo, counter    = ovo_voting(decision_ovo, 4)

##################################################################################
            
################### generate arrhythmia detect flag ##############################
for i in range(0, len(predict_ovo)):
    if predict_ovo[i] != 0: 
        arrhythmia_detect_flag = arrhythmia_detect_flag | 1
    else: arrhythmia_detect_flag = arrhythmia_detect_flag | 0
###################################################################################
                            
#    return predict_ovo,arrhythmia_detect_flag

# predict_ovo,arrhythmia_detect_flag = arrhythmia_detect_flag(RAW_signal)
execution_time = time.time() - start_time

print(predict_ovo)
print(arrhythmia_detect_flag)
print('Total Execution Time is')
print(execution_time)